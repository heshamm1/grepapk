#!/usr/bin/env python3
"""
Consolidated Vulnerability Patterns for Android APK Security Scanner
Contains comprehensive regex patterns, ICC-specific logic, and simplified false positive reduction.
"""

import re
from typing import Dict, Any

# Professional vulnerability titles with comprehensive descriptions
VULNERABILITY_TITLES = {
    'insecure_data_storage': {
        'shared_preferences': 'Insecure SharedPreferences Storage - Sensitive data stored without encryption',
        'sqlite_plaintext': 'SQLite Database in Plaintext - Database accessible without proper protection',
        'local_files': 'Insecure Local File Storage - Files stored without access controls',
        'webview_cache': 'WebView Cache/History Exposure - Sensitive web data cached locally',
        'logcat_leaks': 'Logcat Information Leakage - Credentials or PII logged in plaintext',
        'backup_data': 'Insecure Backup Data Exposure - Sensitive data included in Android backup',
        'external_storage': 'Insecure External Storage Access - Data accessible to other applications'
    },
    'insecure_icc': {
        'exported_activities': 'Insecurely Exported Activities - Activities accessible without proper permissions',
        'exported_services': 'Insecurely Exported Services - Services invokable without authentication',
        'exported_receivers': 'Insecurely Exported Broadcast Receivers - Receivers triggerable by any app',
        'exported_providers': 'Insecurely Exported Content Providers - Database queries leakable',
        'implicit_intents': 'Implicit Intent Hijacking - Intents can be intercepted by malicious apps',
        'intent_spoofing': 'Intent Spoofing Vulnerability - Forged intents can manipulate app behavior',
        'sensitive_intents': 'Sensitive Data in Intents - Tokens/passwords in extras without encryption',
        'sticky_broadcasts': 'Sticky Broadcast Data Leakage - Data persists and may leak to other apps',
        'pending_intent_misuse': 'PendingIntent Misuse - Mutable PendingIntents can be hijacked',
        'task_hijacking': 'Task Hijacking Vulnerability - Malicious UI can overlay legitimate app',
        'deep_link_vulnerabilities': 'Deep Link Vulnerabilities - Unverified deep links can be exploited',
        'exported_without_protection': 'Exported Components Without Protection - No security controls'
    },
    'insecure_webview': {
        'javascript_interface': 'Unsafe JavaScriptInterface - RCE vulnerability through JavaScript bridge',
        'untrusted_content': 'Loading Untrusted Content with JavaScript - XSS-like attacks possible',
        'file_access': 'Insecure file:// or content:// Loading - Local file read attacks',
        'ssl_errors_ignored': 'SSL Errors Ignored in WebView - MITM attacks possible',
        'javascript_enabled': 'JavaScript Enabled for Untrusted Content - XSS vulnerability'
    },
    'hardcoded_secrets': {
        'api_keys': 'Hardcoded API Key Exposure - API keys embedded in source code',
        'tokens': 'Hardcoded Authentication Token - Authentication tokens in plaintext',
        'passwords': 'Hardcoded Password in Source Code - Passwords embedded in application',
        'database_credentials': 'Hardcoded Database Credentials - Database access credentials exposed',
        'encryption_keys': 'Hardcoded Encryption Key - Encryption keys in source code',
        'webhook_urls': 'Hardcoded Webhook URL - Webhook endpoints exposed',
        'base64_encoded': 'Base64 Encoded Secret Detection - Encoded secrets in code',
        'backend_urls': 'Hardcoded Backend URLs/Endpoints - Server endpoints exposed',
        'embedded_certificates': 'Embedded Certificates/Private Keys - SSL certificates in assets'
    },
    'insecure_network': {
        'cleartext_traffic': 'Cleartext Traffic (HTTP) Allowed - Unencrypted network communication',
        'accept_all_certs': 'Accepting All SSL Certificates - SSL validation bypassed',
        'missing_cert_pinning': 'Missing Certificate Pinning - MITM attacks possible',
        'weak_hostname_verifier': 'Weak HostnameVerifier Implementation - Hostname validation bypassed',
        'insecure_trust_manager': 'Insecure TrustManager Implementation - Certificate validation weakened'
    },
    'input_validation': {
        'sql_injection': 'SQL Injection in Content Providers - User input directly in SQL queries',
        'path_traversal': 'Path Traversal in File Operations - Directory traversal attacks possible',
        'command_injection': 'Command Injection in Native/JNI Calls - Shell command execution',
        'xss': 'Cross-Site Scripting (XSS) - Malicious script injection',
        'unsafe_deserialization': 'Unsafe Deserialization - Object injection attacks'
    },
    'code_debug_config': {
        'debuggable_enabled': 'Debug Mode Enabled in Production - App debuggable in release',
        'backup_allowed': 'Allow Backup Flag Enabled - Full app data extraction possible',
        'test_code_paths': 'Test/QA Code Paths in Release Build - Test code in production',
        'no_obfuscation': 'No Code Obfuscation (ProGuard/R8 Disabled) - Code easily readable',
        'vulnerable_native_libs': 'Vulnerable Native Libraries - Known vulnerable native code'
    },
    'side_channel_leakage': {
        'clipboard_data': 'Sensitive Data in Clipboard - Data accessible to other apps',
        'timing_leaks': 'Timing-Based Information Leakage - Information through timing differences',
        'intent_sniffing': 'Intent Sniffing via ADB Logcat - Intent data in system logs',
        'memory_leaks': 'Memory-Based Information Leakage - Sensitive data in memory dumps'
    },
    'insecure_third_party': {
        'outdated_sdks': 'Outdated SDKs with Known Vulnerabilities - Security patches missing',
        'pii_leakage': 'SDKs Leaking PII to Analytics/Ad Networks - Privacy violation',
        'weak_sdk_auth': 'Weak Authentication in Third-Party SDKs - Authentication bypass possible'
    },
    'local_auth_session': {
        'insecure_token_storage': 'Tokens Stored Insecurely - Authentication tokens vulnerable',
        'session_ids_exposed': 'Session IDs in URLs or Logs - Session hijacking possible',
        'weak_biometric_logic': 'Weak Biometric Authentication Logic - Biometric bypass possible'
    },
    'root_detection_bypass': {
        'weak_root_detection': 'Weak Root Detection Logic - Easily bypassable detection',
        'client_only_detection': 'Root Detection Code in Client Only - Can be patched',
        'easily_bypassable': 'Easily Bypassable Detection Methods - Detection ineffective'
    },
    'ssl_pinning_bypass': {
        'improper_pinning': 'Improper SSL Certificate Pinning - Pinning can be bypassed',
        'client_only_pinning': 'SSL Pinning in Client Only - No backend enforcement',
        'bypassable_pinning': 'Bypassable SSL Pinning Implementation - Pinning ineffective'
    }
}

# Exploitation methods for each vulnerability type
EXPLOITATION_METHODS = {
    'insecure_data_storage': {
        'shared_preferences': 'ADB',
        'sqlite_plaintext': 'ADB',
        'local_files': 'ADB',
        'webview_cache': 'ADB',
        'logcat_leaks': 'ADB',
        'backup_data': 'ADB',
        'external_storage': 'ADB'
    },
    'insecure_icc': {
        'exported_activities': 'ADB',
        'exported_services': 'ADB',
        'exported_receivers': 'ADB',
        'exported_providers': 'ADB',
        'implicit_intents': 'ADB',
        'intent_spoofing': 'ADB',
        'sensitive_intents': 'ADB',
        'sticky_broadcasts': 'ADB',
        'pending_intent_misuse': 'ADB',
        'task_hijacking': 'ADB',
        'deep_link_vulnerabilities': 'ADB',
        'exported_without_protection': 'ADB'
    },
    'insecure_webview': {
        'javascript_interface': 'ADB',
        'untrusted_content': 'ADB',
        'file_access': 'ADB',
        'ssl_errors_ignored': 'ADB',
        'javascript_enabled': 'ADB'
    },
    'hardcoded_secrets': {
        'api_keys': 'External APK',
        'tokens': 'External APK',
        'passwords': 'External APK',
        'database_credentials': 'External APK',
        'encryption_keys': 'External APK',
        'webhook_urls': 'External APK',
        'base64_encoded': 'External APK',
        'backend_urls': 'External APK',
        'embedded_certificates': 'External APK'
    },
    'insecure_network': {
        'cleartext_traffic': 'External APK',
        'accept_all_certs': 'External APK',
        'missing_cert_pinning': 'External APK',
        'weak_hostname_verifier': 'External APK',
        'insecure_trust_manager': 'External APK'
    },
    'input_validation': {
        'sql_injection': 'ADB',
        'path_traversal': 'ADB',
        'command_injection': 'ADB',
        'xss': 'ADB',
        'unsafe_deserialization': 'ADB'
    },
    'code_debug_config': {
        'debuggable_enabled': 'ADB',
        'backup_allowed': 'ADB',
        'test_code_paths': 'External APK',
        'no_obfuscation': 'External APK',
        'vulnerable_native_libs': 'External APK'
    },
    'side_channel_leakage': {
        'clipboard_data': 'ADB',
        'timing_leaks': 'External APK',
        'intent_sniffing': 'ADB',
        'memory_leaks': 'External APK'
    },
    'insecure_third_party': {
        'outdated_sdks': 'External APK',
        'pii_leakage': 'External APK',
        'weak_sdk_auth': 'External APK'
    },
    'local_auth_session': {
        'insecure_token_storage': 'ADB',
        'session_ids_exposed': 'ADB',
        'weak_biometric_logic': 'ADB'
    },
    'root_detection_bypass': {
        'weak_root_detection': 'External APK',
        'client_only_detection': 'External APK',
        'easily_bypassable': 'External APK'
    },
    'ssl_pinning_bypass': {
        'improper_pinning': 'External APK',
        'client_only_pinning': 'External APK',
        'bypassable_pinning': 'External APK'
    }
}

# SIMPLIFIED REGEX PATTERNS - Focus on accuracy over complexity
REGEX_PATTERNS = {
    'insecure_data_storage': {
        'shared_preferences': [
            r'getSharedPreferences\s*\(\s*["\'][^"\']*["\']',
            r'SharedPreferences\.Editor',
            r'putString\s*\(\s*["\'][^"\']*(?:password|token|key|secret)[^"\']*["\']'
        ],
        'sqlite_plaintext': [
            r'SQLiteDatabase\.openDatabase\s*\(',
            r'SQLiteOpenHelper',
            r'rawQuery\s*\(\s*["\'][^"\']*["\']'
        ],
        'local_files': [
            r'openFileOutput\s*\(',
            r'getFilesDir\s*\(\s*\)',
            r'File\s*\(\s*context\.getFilesDir\s*\(\s*\)'
        ],
        'webview_cache': [
            r'webView\.getSettings\(\)\.setCacheMode\s*\(\s*WebSettings\.LOAD_DEFAULT\s*\)',
            r'webView\.getSettings\(\)\.setAppCacheEnabled\s*\(\s*true\s*\)'
        ],
        'logcat_leaks': [
            r'Log\.(v|d|i|w|e)\s*\(\s*TAG\s*,\s*["\'][^"\']*(?:password|token|key|secret)[^"\']*["\']',
            r'System\.out\.println\s*\(\s*["\'][^"\']*(?:password|token|key|secret)[^"\']*["\']'
        ],
        'backup_data': [
            r'android:allowBackup\s*=\s*["\']true["\']',
            r'android:fullBackupContent\s*=\s*["\'][^"\']*["\']'
        ],
        'external_storage': [
            r'Environment\.getExternalStorageDirectory\s*\(\s*\)',
            r'getExternalFilesDir\s*\(\s*null\s*\)',
            r'getExternalCacheDir\s*\(\s*\)'
        ]
    },
    'insecure_icc': {
        # SIMPLIFIED ICC PATTERNS - Focus on detection accuracy
        'exported_activities': [
            r'<activity[^>]*android:exported\s*=\s*["\']true["\']',
            r'android:exported\s*=\s*["\']true["\']'
        ],
        'exported_services': [
            r'<service[^>]*android:exported\s*=\s*["\']true["\']',
            r'android:exported\s*=\s*["\']true["\']'
        ],
        'exported_receivers': [
            r'<receiver[^>]*android:exported\s*=\s*["\']true["\']',
            r'android:exported\s*=\s*["\']true["\']'
        ],
        'exported_providers': [
            r'<provider[^>]*android:exported\s*=\s*["\']true["\']',
            r'android:exported\s*=\s*["\']true["\']'
        ],
        'implicit_intents': [
            r'<intent-filter[^>]*>',
            r'<action\s+android:name="[^"]*"',
            r'<category\s+android:name="android\.intent\.category\.DEFAULT"'
        ],
        'intent_spoofing': [
            r'android:scheme\s*=\s*["\'][^"\']*["\']',
            r'<data\s+android:scheme\s*=\s*["\'][^"\']*["\']',
            r'android:autoVerify\s*=\s*["\']false["\']'
        ],
        'sensitive_intents': [
            r'putExtra\s*\(\s*["\'][^"\']*(?:password|token|key|secret)[^"\']*["\']',
            r'getStringExtra\s*\(\s*["\'][^"\']*(?:password|token|key|secret)[^"\']*["\']'
        ],
        'sticky_broadcasts': [
            r'sendStickyBroadcast\s*\(',
            r'sendStickyOrderedBroadcast\s*\('
        ],
        'pending_intent_misuse': [
            r'PendingIntent\.getActivity\s*\(',
            r'PendingIntent\.getService\s*\(',
            r'PendingIntent\.getBroadcast\s*\(',
            r'PendingIntent\.FLAG_UPDATE_CURRENT',
            r'PendingIntent\.FLAG_CANCEL_CURRENT'
        ],
        'task_hijacking': [
            r'android:taskAffinity\s*=\s*["\'][^"\']*["\']',
            r'android:allowTaskReparenting\s*=\s*["\']true["\']'
        ],
        'deep_link_vulnerabilities': [
            r'android:autoVerify\s*=\s*["\']false["\']',
            r'<data\s+android:scheme\s*=\s*["\'][^"\']*["\']\s+android:host\s*=\s*["\']open["\']'
        ],
        'exported_without_protection': [
            r'android:exported\s*=\s*["\']true["\']'
        ]
    },
    'insecure_webview': {
        'javascript_interface': [
            r'addJavascriptInterface\s*\(',
            r'@JavascriptInterface',
            r'webView\.addJavascriptInterface\s*\('
        ],
        'untrusted_content': [
            r'webView\.loadUrl\s*\(\s*["\'][^"\']*["\']',
            r'webView\.loadData\s*\(',
            r'webView\.loadDataWithBaseURL\s*\('
        ],
        'file_access': [
            r'webView\.getSettings\(\)\.setAllowFileAccess\s*\(\s*true\s*\)',
            r'webView\.getSettings\(\)\.setAllowContentAccess\s*\(\s*true\s*\)',
            r'webView\.getSettings\(\)\.setAllowFileAccessFromFileURLs\s*\(\s*true\s*\)'
        ],
        'ssl_errors_ignored': [
            r'webView\.setWebViewClient\s*\(\s*new\s+WebViewClient\s*\(\s*\)\s*\{\s*@Override\s*public\s+void\s+onReceivedSslError\s*\(',
            r'onReceivedSslError\s*\(\s*WebView\s+view\s*,\s*SslErrorHandler\s+handler\s*,\s*SslError\s+error\s*\)\s*\{\s*handler\.proceed\s*\('
        ],
        'javascript_enabled': [
            r'webView\.getSettings\(\)\.setJavaScriptEnabled\s*\(\s*true\s*\)',
            r'webView\.getSettings\(\)\.setDomStorageEnabled\s*\(\s*true\s*\)'
        ]
    },
    'hardcoded_secrets': {
        'api_keys': [
            r'["\'][A-Za-z0-9]{32,}["\']',  # API keys
            r'["\']sk_[A-Za-z0-9]{24,}["\']',  # Stripe keys
            r'["\']pk_[A-Za-z0-9]{24,}["\']',  # Stripe public keys
            r'["\'][A-Za-z0-9]{40}["\']',  # SHA1 hashes
            r'["\'][A-Za-z0-9]{64}["\']'   # SHA256 hashes
        ],
        'tokens': [
            r'["\'][A-Za-z0-9]{20,}["\']',  # General tokens
            r'["\']Bearer\s+[A-Za-z0-9]{20,}["\']',  # Bearer tokens
            r'["\']token["\']\s*[:=]\s*["\'][^"\']+["\']'
        ],
        'passwords': [
            r'["\']password["\']\s*[:=]\s*["\'][^"\']+["\']',
            r'["\']passwd["\']\s*[:=]\s*["\'][^"\']+["\']',
            r'["\']pwd["\']\s*[:=]\s*["\'][^"\']+["\']',
            r'["\']secret["\']\s*[:=]\s*["\'][^"\']+["\']'
        ],
        'database_credentials': [
            r'["\']jdbc:mysql://[^"\']+["\']',
            r'["\']jdbc:postgresql://[^"\']+["\']',
            r'["\']mongodb://[^"\']+["\']',
            r'["\']username["\']\s*[:=]\s*["\'][^"\']+["\']',
            r'["\']user["\']\s*[:=]\s*["\'][^"\']+["\']'
        ],
        'encryption_keys': [
            r'["\']AES["\']\s*[:=]\s*["\'][A-Za-z0-9]{16,}["\']',
            r'["\']RSA["\']\s*[:=]\s*["\'][A-Za-z0-9]{100,}["\']',
            r'["\']key["\']\s*[:=]\s*["\'][A-Za-z0-9]{16,}["\']'
        ],
        'webhook_urls': [
            r'["\']webhook["\']\s*[:=]\s*["\']https?://[^"\']+["\']',
            r'["\']callback["\']\s*[:=]\s*["\']https?://[^"\']+["\']',
            r'["\']hook["\']\s*[:=]\s*["\']https?://[^"\']+["\']'
        ],
        'base64_encoded': [
            r'["\'][A-Za-z0-9+/]{32,}={0,2}["\']',  # Base64 encoded strings
            r'Base64\.decode\s*\(\s*["\'][A-Za-z0-9+/]{32,}={0,2}["\']'
        ],
        'backend_urls': [
            r'["\']https?://[^"\']*["\']',  # HTTP/HTTPS URLs
            r'["\']api[^"\']*["\']',  # API endpoints
            r'["\']server[^"\']*["\']',  # Server URLs
            r'["\']endpoint[^"\']*["\']'  # Endpoint URLs
        ],
        'embedded_certificates': [
            r'-----BEGIN\s+CERTIFICATE-----',
            r'-----BEGIN\s+PRIVATE\s+KEY-----',
            r'-----BEGIN\s+RSA\s+PRIVATE\s+KEY-----',
            r'\.pem["\']',
            r'\.crt["\']',
            r'\.key["\']'
        ]
    },
    'insecure_network': {
        'cleartext_traffic': [
            r'android:usesCleartextTraffic\s*=\s*["\']true["\']',
            r'http://[^"\']*["\']',
            r'HttpURLConnection',
            r'URL\s*\(\s*["\']http://'
        ],
        'accept_all_certs': [
            r'TrustManagerFactory\.getDefaultAlgorithm\s*\(\s*\)',
            r'X509TrustManager\s*\{\s*public\s+void\s+checkClientTrusted\s*\(\s*X509Certificate\s*\[\s*\]\s+certs\s*,\s*String\s+authType\s*\)\s*\{\s*\}\s*public\s+void\s+checkServerTrusted\s*\(\s*X509Certificate\s*\[\s*\]\s+certs\s*,\s*String\s+authType\s*\)\s*\{\s*\}',
            r'HostnameVerifier\s*\{\s*public\s+boolean\s+verify\s*\(\s*String\s+hostname\s*,\s*SSLSession\s+session\s*\)\s*\{\s*return\s+true\s*;\s*\}\s*\}'
        ],
        'missing_cert_pinning': [
            r'CertificatePinner',
            r'X509TrustManager',
            r'TrustManager'
        ],
        'weak_hostname_verifier': [
            r'HostnameVerifier',
            r'verify\s*\(\s*String\s+hostname'
        ],
        'insecure_trust_manager': [
            r'TrustManager',
            r'X509TrustManager',
            r'checkServerTrusted'
        ]
    },
    'input_validation': {
        'sql_injection': [
            r'rawQuery\s*\(\s*["\'][^"\']*["\']\s*\+',
            r'execSQL\s*\(\s*["\'][^"\']*["\']\s*\+',
            r'query\s*\(\s*["\'][^"\']*["\']\s*\+'
        ],
        'path_traversal': [
            r'\.\./',
            r'\.\.\\',
            r'File\s*\(\s*[^)]*["\']\.\./',
            r'getAbsolutePath\s*\(\s*\)'
        ],
        'command_injection': [
            r'Runtime\.getRuntime\s*\(\s*\)\.exec\s*\(',
            r'ProcessBuilder\s*\(',
            r'exec\s*\(\s*["\'][^"\']*["\']'
        ],
        'xss': [
            r'webView\.loadData\s*\(\s*[^,]+,\s*["\']text/html["\']',
            r'webView\.loadUrl\s*\(\s*["\']javascript:',
            r'webView\.evaluateJavascript\s*\('
        ],
        'unsafe_deserialization': [
            r'ObjectInputStream\s*\(',
            r'readObject\s*\(\s*\)',
            r'fromJson\s*\('
        ]
    },
    'code_debug_config': {
        'debuggable_enabled': [
            r'android:debuggable\s*=\s*["\']true["\']',
            r'debuggable\s*=\s*true'
        ],
        'backup_allowed': [
            r'android:allowBackup\s*=\s*["\']true["\']',
            r'allowBackup\s*=\s*true'
        ],
        'test_code_paths': [
            r'BuildConfig\.DEBUG',
            r'if\s*\(debug\)',
            r'Log\.isLoggable'
        ],
        'no_obfuscation': [
            r'minifyEnabled\s*false',
            r'proguardFiles\s*getDefaultProguardFile\s*\(\s*["\']proguard-android-optimize\.txt["\']\s*\)',
            r'proguardFiles\s*getDefaultProguardFile\s*\(\s*["\']proguard-android\.txt["\']\s*\)'
        ],
        'vulnerable_native_libs': [
            r'\.so',
            r'System\.loadLibrary\s*\(',
            r'System\.load\s*\('
        ]
    },
    'side_channel_leakage': {
        'clipboard_data': [
            r'ClipboardManager',
            r'setText\s*\(',
            r'getText\s*\(\s*\)'
        ],
        'timing_leaks': [
            r'System\.currentTimeMillis\s*\(\s*\)',
            r'System\.nanoTime\s*\(\s*\)',
            r'Thread\.sleep\s*\('
        ],
        'intent_sniffing': [
            r'Intent\s*\(\s*[^)]*\)',
            r'startActivity\s*\(',
            r'startService\s*\('
        ],
        'memory_leaks': [
            r'WeakReference',
            r'SoftReference',
            r'PhantomReference'
        ]
    },
    'insecure_third_party': {
        'outdated_sdks': [
            r'compile\s*["\']com\.google\.android\.gms:play-services:[0-9]+\.[0-9]+\.[0-9]+["\']',
            r'compile\s*["\']com\.facebook\.android:facebook-android-sdk:[0-9]+\.[0-9]+\.[0-9]+["\']',
            r'compile\s*["\']com\.squareup\.okhttp:okhttp:[0-9]+\.[0-9]+\.[0-9]+["\']'
        ],
        'pii_leakage': [
            r'Analytics\.track\s*\(',
            r'Crashlytics\.log\s*\(',
            r'FirebaseAnalytics\.logEvent\s*\('
        ],
        'weak_sdk_auth': [
            r'FacebookSdk\.sdkInitialize\s*\(',
            r'GoogleSignIn\.getLastSignedInAccount\s*\(',
            r'Twitter\.logIn\s*\('
        ]
    },
    'local_auth_session': {
        'insecure_token_storage': [
            r'SharedPreferences\.Editor\.putString\s*\(\s*["\']token["\']',
            r'SharedPreferences\.Editor\.putString\s*\(\s*["\']auth_token["\']',
            r'SharedPreferences\.Editor\.putString\s*\(\s*["\']session_id["\']'
        ],
        'session_ids_exposed': [
            r'Log\.d\s*\(\s*TAG\s*,\s*["\']session[^"\']*["\']',
            r'System\.out\.println\s*\(\s*["\']session[^"\']*["\']',
            r'Toast\.makeText\s*\(\s*[^,]+,\s*["\']session[^"\']*["\']'
        ],
        'weak_biometric_logic': [
            r'BiometricPrompt',
            r'FingerprintManager',
            r'BiometricManager'
        ]
    },
    'root_detection_bypass': {
        'weak_root_detection': [
            r'Build\.TAGS',
            r'Build\.FINGERPRINT',
            r'Build\.MODEL',
            r'PackageManager\.getInstalledPackages'
        ],
        'client_only_detection': [
            r'RootBeer',
            r'RootCloak',
            r'Magisk'
        ],
        'easily_bypassable': [
            r'if\s*\(\s*isRooted\s*\(\s*\)\s*\)',
            r'if\s*\(\s*!isRooted\s*\(\s*\)\s*\)',
            r'checkRoot\s*\(\s*\)'
        ]
    },
    'ssl_pinning_bypass': {
        'improper_pinning': [
            r'CertificatePinner',
            r'X509TrustManager',
            r'TrustManager'
        ],
        'client_only_pinning': [
            r'checkServerTrusted',
            r'verify\s*\(\s*String\s+hostname'
        ],
        'bypassable_pinning': [
            r'if\s*\(\s*!isValidCertificate\s*\(\s*\)\s*\)',
            r'if\s*\(\s*isValidCertificate\s*\(\s*\)\s*\)',
            r'validateCertificate\s*\(\s*\)'
        ]
    }
}

# Framework detection patterns
FRAMEWORK_PATTERNS = {
    'source_code_project': [
        r'\.java$',
        r'\.kt$',
        r'\.xml$',
        r'AndroidManifest\.xml',
        r'build\.gradle',
        r'MainActivity',
        r'Application'
    ],
    'gradle_build': [
        r'build\.gradle',
        r'gradle\.properties',
        r'gradlew',
        r'gradlew\.bat',
        r'gradle/wrapper'
    ],
    'maven_build': [
        r'pom\.xml',
        r'mvnw',
        r'mvnw\.cmd',
        r'\.mvn/'
    ],
    'ant_build': [
        r'build\.xml',
        r'ant\.properties',
        r'local\.properties'
    ]
}

# ICC-SPECIFIC LOGIC: Disable false positive filtering for ICC vulnerabilities
def is_icc_vulnerability(category: str, subcategory: str) -> bool:
    """Check if this is an ICC vulnerability that should NEVER be filtered out."""
    return category == 'insecure_icc'

def is_false_positive(category: str, subcategory: str, line_content: str, context: str) -> bool:
    """
    Enhanced false positive detection that NEVER filters out ICC vulnerabilities.
    ICC vulnerabilities are critical and should always be reported.
    """
    # NEVER filter out ICC vulnerabilities - they are always real
    if is_icc_vulnerability(category, subcategory):
        return False
    
    # For non-ICC vulnerabilities, apply minimal filtering
    line_lower = line_content.lower()
    
    # Skip obvious comments
    if line_content.strip().startswith('//') or line_content.strip().startswith('#'):
        return True
    
    # Skip if it's clearly a false positive
    if any(word in line_lower for word in ['example', 'test', 'sample', 'demo', 'placeholder']):
        return True
    
    return False

def get_vulnerability_title(category: str, subcategory: str) -> str:
    """Get the vulnerability title for a given category and subcategory."""
    return VULNERABILITY_TITLES.get(category, {}).get(subcategory, f"{category.replace('_', ' ').title()} - {subcategory.replace('_', ' ').title()}")

def get_exploitation_method(category: str, subcategory: str) -> str:
    """Get the exploitation method for a given category and subcategory."""
    return EXPLOITATION_METHODS.get(category, {}).get(subcategory, "Unknown")

def get_adb_payload(category: str, subcategory: str, package_name: str = "com.example.app", component_name: str = "MainActivity") -> str:
    """Generate accurate ADB payload for exploitation."""
    if category == 'insecure_icc':
        if subcategory in ['exported_activities', 'exported_services', 'exported_receivers']:
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'payload\' \'test_value\'"'
        elif subcategory == 'intent_spoofing':
            return f'adb shell "am start -W -a android.intent.action.VIEW -d \'ctf://payload\' -n {package_name}/{component_name}"'
        elif subcategory == 'task_hijacking':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'task_hijack\' \'true\'"'
        elif subcategory == 'deep_link_vulnerabilities':
            return f'adb shell "am start -W -a android.intent.action.VIEW -d \'myapp://open/payload\' -n {package_name}/{component_name}"'
        elif subcategory == 'implicit_intents':
            return f'adb shell "am start -W -a android.intent.action.VIEW -n {package_name}/{component_name}"'
        elif subcategory == 'exported_providers':
            return f'adb shell "content query --uri content://{package_name}/data"'
        elif subcategory == 'exported_without_protection':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'exploit\' \'true\'"'
    
    elif category == 'insecure_webview':
        if subcategory == 'javascript_interface':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'javascript\' \'<script>alert(\\\"XSS\\\")</script>\'"'
        elif subcategory == 'untrusted_content':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'url\' \'javascript:alert(\\\"XSS\\\")\'"'
        else:
            return f'adb shell "am start -W -n {package_name}/{component_name}"'
    
    elif category == 'input_validation':
        if subcategory == 'sql_injection':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'input\' \'\\\'; DROP TABLE users; --\'"'
        elif subcategory == 'path_traversal':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'path\' \'../../../data/data/com.example.app/files/secret.txt\'"'
        elif subcategory == 'xss':
            return f'adb shell "am start -W -n {package_name}/{component_name} --es \'input\' \'<script>alert(\\\"XSS\\\")</script>\'"'
        else:
            return f'adb shell "am start -W -n {package_name}/{component_name}"'
    
    elif category == 'hardcoded_secrets':
        if subcategory == 'passwords':
            return f'adb shell "dumpsys package com.example.app | grep -i passwords"'
        elif subcategory == 'api_keys':
            return f'adb shell "dumpsys package com.example.app | grep -E \'[A-Za-z0-9]{{32,}}\'"'
        elif subcategory == 'base64_encoded':
            return f'adb shell "dumpsys package com.example.app | grep -E \'[A-Za-z0-9+/]{{32,}}={{0,2}}\'"'
        else:
            return f'adb shell "am start -W -n {package_name}/{component_name}"'
    
    # Default payload
    return f'adb shell "am start -W -n {package_name}/{component_name}"'

def get_patterns() -> Dict[str, Any]:
    """Get all vulnerability patterns."""
    return REGEX_PATTERNS

def get_framework_patterns() -> Dict[str, Any]:
    """Get framework detection patterns."""
    return FRAMEWORK_PATTERNS
